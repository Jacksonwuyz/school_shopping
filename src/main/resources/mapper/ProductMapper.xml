<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="com.cn.mybatis.test1.dao.userMapper"就是com.cn.mybatis.test1.dao(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="com.example.school_shopping.dao.ProductDao">
	<resultMap id="product" type="Product">
		<association property="productType" javaType="ProductType" column="ProductTypeId" select="com.example.school_shopping.dao.ProductTypeDao.getProductType">
		</association>

	</resultMap>
	<select id="getProductList" resultMap="product" >
		select * from product order by id asc
	</select>
	<!--添加-->
	<insert id="SaveProduct">
		insert into
		product(id,productTypeId,name,orderNum,price,originalPrice,picUrl,number,click,onSale)
		values(null,#{productTypeId},#{name},#{orderNum},#{price},#{originalPrice},#{picUrl},#{number},#{click},#{onSale})
	</insert>
<!--重名-->
	<select id="existsProduct" resultType="Product">
		select * from product where name=#{name}
	</select>
	<!--删除-->
	<delete id="deleteProduct">
		delete from product where id=#{id}
	</delete>
	<select id="total" resultType="int">
		select count(id) from Product
	</select>
	<select id="getPartlist" resultMap="product">
		select * from product order by id asc limit #{offset},#{length}
	</select>

	<select id="getShopProductTypelist" resultMap="product">
		select * from product where productTypeId=#{producttype.id}
	</select>

	<select id="getProduct"  resultType="Product">
		select * from product where id=#{id}
	</select>
	<!--批量删除-->
	<delete id="deletes" >
		delete from product where id in
		<foreach item="item" collection="array" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
	<!--修改-->
	<update id="updateProduct">
		update product
		<set>
			<if test="productType!=null and producttype.id!=null">productTypeId=#{producttype.id},</if>
			<if test="name!=null and name.length()>0">name=#{name},</if>
			<if test="orderNum!=null">orderNum=#{orderNum},</if>
			<if test="description!=null">description=#{description},</if>
			<if test="content!=null">content=#{content},</if>
			<if test="price!=null and price>0">price=#{price},</if>
			<if test="originalPrice!=null and originalPrice>0">originalPrice=#{originalPrice},</if>
			<if test="picUrl!=null">picUrl=#{picUrl},</if>
			<if test="number!=null and number>0">number=#{number},</if>
			<if test="click!=null and click>0">click=#{click},</if>
			<if test="price!=null and price>0">price=#{price},</if>
			<if test="finalEditor!=null and finalEditor.id!=null">finalEditorId=#{finalEditor.id},</if>
			<if test="updateTime!=null">updateTime=#{updateTime},</if>
		</set>
		where id=#{id}
	</update>
	<select id="querySize" resultType="int">
		select count(1) from product
		<if test="objectQuery!=null">
			<where>
				<if test="objectQuery.name!=null and objectQuery.name.length()>0">
					<!-- bind，重新定义一个变量，可用于模糊查询等，并且可以直接覆盖原变量 -->
					<bind name="name" value="'%' + _parameter.objectQuery.name + '%'" />
					and name like #{name}
				</if>
				<if test="objectQuery.productType!=null">
					<if test="objectQuery.productType.id!=null">
						and productTypeId=#{objectQuery.productType.id}
					</if>
				</if>
				<if test="objectQuery.onSale!=null">
					and onSale=#{objectQuery.onSale}
				</if>
				<if test="objectQuery.orderNum!=null">
					and orderNum=#{objectQuery.orderNum}
				</if>
				<if test="objectQuery.creator!=null and objectQuery.creator.id!=null">
					and creatorId=#{objectQuery.creator.id}
				</if>
				<if test="objectQuery.finalEditor!=null and objectQuery.finalEditor.id!=null">
					and finalEditorId=#{objectQuery.finalEditor.id}
				</if>
			</where>
		</if>
	</select>

	<select id="query" resultMap="product">
		/* select * from product*/
		select id,productTypeId,name,orderNum,price,originalPrice,picUrl,repository,click,onSale,createTime,creatorId,finalEditorId,updateTime from product
		<if test="objectQuery!=null">
			<where>
				<if test="objectQuery.name!=null and objectQuery.name.length()>0">
					<!-- bind，重新定义一个变量，可用于模糊查询等，并且可以直接覆盖原变量 -->
					<bind name="name" value="'%' + _parameter.objectQuery.name + '%'" />
					and name like #{name}
				</if>
				<if test="objectQuery.productType!=null">
					<if test="objectQuery.productType.id!=null">
						and productTypeId=#{objectQuery.productType.id}
					</if>
				</if>
				<if test="objectQuery.onSale!=null">
					and onSale=#{objectQuery.onSale}
				</if>
				<if test="objectQuery.orderNum!=null">
					and orderNum=#{objectQuery.orderNum}
				</if>
				<if test="objectQuery.creator!=null and objectQuery.creator.id!=null">
					and creatorId=#{objectQuery.creator.id}
				</if>
				<if test="objectQuery.finalEditor!=null and objectQuery.finalEditor.id!=null">
					and finalEditorId=#{objectQuery.finalEditor.id}
				</if>
			</where>
		</if>
		<choose>
			<when test="objectQuery.orderType!=null">
				<choose>
					<when test="objectQuery.orderType==1">
						order by orderNum asc,createTime desc
					</when>
					<when test="objectQuery.orderType==2">
						order by orderNum desc,createTime desc
					</when>
					<when test="objectQuery.orderType==3">
						order by click desc
					</when>
					<when test="objectQuery.orderType==4">
						order by click asc
					</when>
					<when test="objectQuery.orderType==5">
						order by createTime desc
					</when>
					<when test="objectQuery.orderType==6">
						order by createTime asc
					</when>
					<when test="objectQuery.orderType==7">
						order by price asc
					</when>
					<when test="objectQuery.orderType==8">
						order by price desc
					</when>
					<otherwise>
						order by orderNum asc,createTime desc
					</otherwise>
				</choose>
			</when>
			<otherwise>
				order by orderNum asc,createTime desc
			</otherwise>
		</choose>
		limit #{offset},#{length}
	</select>

	<select id="searchProducts" resultType="product">
		<bind name="pattern1" value="'%' + _parameter.name + '%'" />
		<bind name="pattern2" value="'%' + _parameter.price + '%'" />
		select * from product
		<where>
			<if test="name != null and name != ''">
				and name like #{pattern1}
			</if>
			<if test="price != null and price != ''">
				and price like #{pattern2}
			</if>
		</where>
		order by orderNum asc,createTime desc
	</select>
</mapper>